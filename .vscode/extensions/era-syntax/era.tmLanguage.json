{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Era",
	"scopeName": "source.era",
	"fileTypes": [
		"era"
	],
	"patterns": [
		{
			"include": "#comments"
		},
        {
            "include": "#keywords"
        },
        {
            "include": "#strings"
        },
		{
			"include": "#numbers"
		},
        {
            "include": "#operators"
        },
        {
            "include": "#variables"
        },
        {
            "include": "#types"
        },
        {
            "include": "#functions"
        },
        {
            "include": "#annotations"
         },
         {
            "include": "#type_declarations"
        },
		{
			"include": "#punctuation"
		}
	],
	"repository": {
		"comments": {
            "patterns": [
                {
                    "name": "comment.line.era",
                    "match": "//.*$"
                },
                {
                    "name": "comment.block.era",
                    "begin": "/\\*",
                    "end": "\\*/"
                }
            ]
        },
		"keywords": {
			"patterns": [
				{
                    "name": "keyword.control.era",
                    "match": "\\b(if|else|elseif|for|while|switch|case|break|default|in|try|catch|throw|async|await|yield|continue|return)\\b"
                },
                {
                    "name": "keyword.declaration.era",
                    "match": "\\b(let|const|func|class|enum|event|import|export|new|delete)\\b"
                },
                {
                    "name": "keyword.declaration.import.alias.era",
                    "match": "\\b(as)\\b(?=\\s+\\w+\\s+from)"
                },
                {
                    "name": "keyword.operator.era",
                    "match": "\\b(is|not|or|and|in)\\b"
                },
                {
                    "name": "keyword.operator.cast.era",
                    "match": "\\b(as)\\b(?=\\s+\\w+)"
                },
                {
                    "name": "constant.language.boolean.era",
                    "match": "\\b(true|false)\\b"
                }
			]
		},
        "strings": {
            "name": "string.quoted.era",
            "begin": "\"",
            "end": "\"",
            "patterns": [
                {
                    "name": "constant.character.escape.era",
                    "match": "\\\\."
                }
            ]
        },
		"numbers": {
			"patterns": [
				{
					"name": "constant.numeric.integer.era",
					"match": "\\b\\d+\\b"
				},
				{
					"name": "constant.numeric.float.era",
					"match": "\\b\\d+\\.\\d+\\b"
				},
                {
					"name": "constant.numeric.hex.era",
					"match": "\\b0x[0-9a-fA-F]+\\b"
				},
                {
                     "name": "constant.numeric.bigint.era",
                     "match": "\\b\\d+n\\b"
                 }
			]
		},
        "operators": {
            "patterns": [
                {
                    "name": "keyword.operator.arithmetic.era",
                    "match": "(\\+|\\-|\\*|\\/|\\*\\*|%|\\/\\/)"
                },
                {
                    "name": "keyword.operator.assignment.era",
                    "match": "(=|\\+=|\\-=|\\*=|\\/=|%=|\\/=)"
                },
                {
                    "name": "keyword.operator.bitwise.era",
                    "match": "(<<|>>|\\^|~|&|\\|)"
                },
                {
                    "name": "keyword.operator.boolean.era",
                    "match": "(\\|\\||&&|<|>|<=|>=|!=|!|==|===|!==|\\?=|\\!\\?=)"
                },
				{
					"name": "keyword.operator.increment_decrement.era",
					"match": "(\\+\\+|--)"
				},
                {
                    "name": "keyword.operator.cast.era",
                    "match": "\\b(as)\\b(?=\\s+\\w+)" 
                }
            ]
        },
		"variables": {
			"patterns": [
				{
					"name": "variable.other.readwrite.era",
					"match": "\\b(?!int|float|double|bool|string|array|dictionary|function|class|event|enum|type|error|null|nullable|immutable|void|big_int)[a-zA-Z_][a-zA-Z0-9_]*\\b"
				}
			]
		},
         "types": {
            "patterns": [
                {
                    "name": "entity.name.type.era",
					"match": "\\b(int|float|double|bool|string|array|dictionary|function|class|event|enum|type|error|null|nullable|immutable|void|big_int)\\b"
                }
            ]
        },
		"functions": {
			"patterns": [
				{
					"name": "entity.name.function.era",
					"match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b(?=\\()"
				},
                {
                     "name": "support.function.era",
                    "match": "\\b(push|pop|length|reverse|to_upper|to_lower|trim|split|starts_with|ends_with|contains|index_of|replace|subscribe|connect|unsubscribe|unconnect|emit|bind|call|to_immutable)\\b"
                }
			]
		},
        "annotations": {
            "name": "meta.annotation.era",
            "begin": "@",
            "end": "(?=[\\s\\n])",
            "patterns": [
                {
                    "name": "entity.name.function.annotation.era",
                    "match":  "[a-zA-Z_][a-zA-Z0-9_]*"
                },
                {
                    "name": "punctuation.parenthesis.open.annotation.era",
                    "match": "\\("
                },
                {
                    "name": "punctuation.parenthesis.close.annotation.era",
                    "match": "\\)"
                },
                {
                     "name": "string.annotation.era",
                     "begin": "\"",
                     "end": "\""
                },
                {
                   "name": "variable.parameter.annotation.era",
                   "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
                },
               {
                    "name": "punctuation.separator.annotation.era",
                    "match": ","
                 }
            ]
        },
         "type_declarations": {
            "patterns": [
                {
                    "name": "entity.name.type.declaration.era",
					"match": "\\b(int|float|double|bool|string|array|dictionary|function|class|event|enum|type|error|null|nullable|immutable|void|big_int)\\b(?=[\\s:]+)"
                }
            ]
        },
		"punctuation": {
			"patterns": [
				{
					"name": "punctuation.section.scope.begin.era",
					"match": "\\{"
				},
				{
					"name": "punctuation.section.scope.end.era",
					"match": "\\}"
				},
                {
                    "name": "punctuation.terminator.era",
                    "match": ";"
                },
                {
                    "name": "punctuation.separator.era",
                    "match": ","
                 },
                 {
                    "name": "punctuation.parenthesis.open.era",
                    "match": "\\("
                },
                 {
                    "name": "punctuation.parenthesis.close.era",
                    "match": "\\)"
                },
                 {
                     "name": "punctuation.brackets.open.era",
                     "match": "\\["
                 },
                 {
                    "name": "punctuation.brackets.close.era",
                    "match": "\\]"
                 },
                 {
                     "name": "punctuation.operator.assignment.era",
                    "match": "="
                },
                {
                    "name": "punctuation.dot.era",
                    "match": "\\."
                }
			]
		}
	}
}